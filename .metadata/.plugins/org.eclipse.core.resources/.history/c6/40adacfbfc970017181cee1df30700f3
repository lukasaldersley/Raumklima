package CSV_PLOTTER;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;

/**
 * Write a description of class FILES here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class FILES
{
    public static String branch="master";//master, V1 and V1.6 are Options
    public static String projectUri="https://raw.githubusercontent.com/lukasaldersley/Raumklima/";
    public static String downloadTargetUri="https://github.com/lukasaldersley/Raumklima/raw/";

    public static final String VERSION="1.6.1.1";

    private static File configFile;
    private static File oldFile;
    private static Image logo;
    private static ReadableByteChannel readableByteChannelFromSource;
    private static String[] configRaw;
    private static FileOutputStream fileOutputStream;
    private static URL source;
    public static BufferedReader br;

    private static BufferedWriter bw;
    
	public static void initConfig() {
		//check if the Configurationfile exists, if not download it
        configFile=new File("CSV_PLOTTERConfig.txt");
        if(!configFile.exists()){
            //https://stackoverflow.com/questions/921262/how-to-download-and-save-a-file-from-internet-using-java
            //(antwort von dfa und Attila)
            //how-to-download-and-save-a-file-from-internet-using-java.htm
            //1.9.17 20:58
            try{
                source = new URL(projectUri+branch+"/PublicVersion/CSV_PLOTTERConfig.txt");
                readableByteChannelFromSource = Channels.newChannel(source.openStream());
                fileOutputStream = new FileOutputStream("CSV_PLOTTERConfig.txt");
                fileOutputStream.getChannel().transferFrom(readableByteChannelFromSource, 0, Long.MAX_VALUE);
                fileOutputStream.close();
            }
            catch(Exception e){
                e.printStackTrace();
            }
        }
	}

	public static void update() {
		//Check for Software updates
        if(STATE.autoUpdate){
            if(checkIfUpdateAvailable()){
                updateJar();
            }
        }
	}
	
	public static void loadConfigurationFile(){//read in the CSV_PLOTTERConfig.txt file, which holds the configuration
        configRaw=new String[STATE.NUMBER_OF_CONFIG_ENTRIES];
        try {
            br = new BufferedReader(new FileReader(configFile));
            for(int i=0;i<STATE.NUMBER_OF_CONFIG_ENTRIES;i++){
                configRaw[i]=br.readLine();
                if(STATE.debug){
                    System.out.println("CFG: "+configRaw[i]);
                }
            }
            //System.out.println(configRaw[9]);
            //CLOSE_WINDOW_KEY_CODE=Integer.parseInt(new String(configRaw[9].trim().getBytes("UTF-8"),"UTF-8"));
            STATE.CLOSE_WINDOW_KEY_CODE=Integer.parseInt(configRaw[8]);
            STATE.CLOSE_WINDOW_KEY_STRING=configRaw[9];
            STATE.OPEN_HELP_WINDOW_KEY_CODE=Integer.parseInt(configRaw[14].trim());
            STATE.OPEN_HELP_WINDOW_KEY_STRING=configRaw[15];
            STATE.OPEN_NEW_PLOT_KEY_CODE=Integer.parseInt(configRaw[20].trim());
            STATE.OPEN_NEW_PLOT_KEY_STRING=configRaw[21];
            STATE.OPEN_NEW_WINDOW_KEY_CODE=Integer.parseInt(configRaw[26].trim());
            STATE.OPEN_NEW_WINDOW_KEY_STRING=configRaw[27];
            STATE.OPEN_SETTINGS_WINDOW_KEY_CODE=Integer.parseInt(configRaw[32].trim());
            STATE.OPEN_SETTINGS_WINDOW_KEY_STRING=configRaw[33];
            STATE.REFRESH_FRAME_KEY_CODE=Integer.parseInt(configRaw[38].trim());
            STATE.REFRESH_FRAME_KEY_STRING=configRaw[39];
            STATE.SAVE_GRAPH_IMAGE_KEY_CODE=Integer.parseInt(configRaw[44].trim());
            STATE.SAVE_GRAPH_IMAGE_KEY_STRING=configRaw[45];
            STATE.TOGGLE_BOTTOM_PANEL_VISIBILITY_KEY_CODE=Integer.parseInt(configRaw[50].trim());
            STATE.TOGGLE_BOTTOM_PANEL_VISIBILITY_KEY_STRING=configRaw[51];
            STATE.TOGGLE_FULLSCREEN_MODE_KEY_CODE=Integer.parseInt(configRaw[56].trim());
            STATE.TOGGLE_FULLSCREEN_MODE_KEY_STRING=configRaw[57];

            STATE.CLOSE_WINDOW_ALT_REQUIRED=configRaw[10].equals("YES");
            STATE.CLOSE_WINDOW_CTRL_REQUIRED=configRaw[11].equals("YES");
            STATE.            CLOSE_WINDOW_SHIFT_REQUIRED=configRaw[12].equals("YES");

            STATE.OPEN_HELP_WINDOW_ALT_REQUIRED=configRaw[16].equals("YES");
            STATE.OPEN_HELP_WINDOW_CTRL_REQUIRED=configRaw[17].equals("YES");
            STATE.OPEN_HELP_WINDOW_SHIFT_REQUIRED=configRaw[18].equals("YES");

            STATE.            OPEN_NEW_PLOT_ALT_REQUIRED=configRaw[22].equals("YES");
            STATE.OPEN_NEW_PLOT_CTRL_REQUIRED=configRaw[23].equals("YES");
            STATE.OPEN_NEW_PLOT_SHIFT_REQUIRED=configRaw[24].equals("YES");

            STATE.            OPEN_NEW_WINDOW_ALT_REQUIRED=configRaw[28].equals("YES");
            STATE.OPEN_NEW_WINDOW_CTRL_REQUIRED=configRaw[29].equals("YES");
            STATE.OPEN_NEW_WINDOW_SHIFT_REQUIRED=configRaw[30].equals("YES");

            STATE.OPEN_SETTINGS_WINDOW_ALT_REQUIRED=configRaw[34].equals("YES");
            STATE.OPEN_SETTINGS_WINDOW_CTRL_REQUIRED=configRaw[35].equals("YES");
            STATE.OPEN_SETTINGS_WINDOW_SHIFT_REQUIRED=configRaw[36].equals("YES");

            STATE.REFRESH_FRAME_ALT_REQUIRED=configRaw[40].equals("YES");
            STATE.REFRESH_FRAME_CTRL_REQUIRED=configRaw[41].equals("YES");
            STATE.            REFRESH_FRAME_SHIFT_REQUIRED=configRaw[42].equals("YES");

            STATE.            SAVE_GRAPH_IMAGE_ALT_REQUIRED=configRaw[46].equals("YES");
            STATE.SAVE_GRAPH_IMAGE_CTRL_REQUIRED=configRaw[47].equals("YES");
            STATE.SAVE_GRAPH_IMAGE_SHIFT_REQUIRED=configRaw[48].equals("YES");

            STATE.            TOGGLE_BOTTOM_PANEL_VISIBILITY_ALT_REQUIRED=configRaw[52].equals("YES");
            STATE.TOGGLE_BOTTOM_PANEL_VISIBILITY_CTRL_REQUIRED=configRaw[53].equals("YES");
            STATE.TOGGLE_BOTTOM_PANEL_VISIBILITY_SHIFT_REQUIRED=configRaw[54].equals("YES");

            STATE.TOGGLE_FULLSCREEN_MODE_ALT_REQUIRED=configRaw[58].equals("YES");
            STATE.TOGGLE_FULLSCREEN_MODE_CTRL_REQUIRED=configRaw[59].equals("YES");
            STATE.TOGGLE_FULLSCREEN_MODE_SHIFT_REQUIRED=configRaw[60].equals("YES");

            STATE.savePng=configRaw[64].equals("YES");
            STATE.saveJpeg=configRaw[66].equals("YES");
            STATE.imageWidth=Integer.parseInt(configRaw[68].trim());
            STATE.imageHeight=Integer.parseInt(configRaw[70].trim());
            STATE.getImageSizeAutomatically=configRaw[72].equals("YES");
            STATE.fullscreenOnStartup=configRaw[76].equals("YES");
            STATE.fullscreenOk=configRaw[78].equals("YES");
            STATE.bottomPanelExpandedOnStartup=configRaw[80].equals("YES");
            STATE.autoUpdate=configRaw[82].equals("YES");
            STATE.interpolationFactor=Integer.parseInt(configRaw[84].trim());
            STATE.isCustomInterpolated=configRaw[86].equals("YES");
            STATE.interpolationOffset=Integer.parseInt(configRaw[88].trim());
            if(STATE.getImageSizeAutomatically){
            	STATE.imageHeight=fullscreenDimension.height;
            	STATE.imageWidth=fullscreenDimension.width;
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }

    /**
     * Writes the Configuration (which is saved in a {@link String} Array in Memory) to a File on the local Storage
     */
    static void saveConfigurationFile(){
        if(STATE.debug){
            System.out.println("updating config");
        }
        configRaw[8]=String.valueOf(STATE.CLOSE_WINDOW_KEY_CODE);
        configRaw[9]=STATE.CLOSE_WINDOW_KEY_STRING;
        configRaw[14]=String.valueOf(STATE.OPEN_HELP_WINDOW_KEY_CODE);
        configRaw[15]=STATE.OPEN_HELP_WINDOW_KEY_STRING;
        configRaw[20]=String.valueOf(STATE.OPEN_NEW_PLOT_KEY_CODE);
        configRaw[21]=STATE.OPEN_NEW_PLOT_KEY_STRING;
        configRaw[26]=String.valueOf(STATE.OPEN_NEW_WINDOW_KEY_CODE);
        configRaw[27]=STATE.OPEN_NEW_WINDOW_KEY_STRING;
        configRaw[32]=String.valueOf(STATE.OPEN_SETTINGS_WINDOW_KEY_CODE);
        configRaw[33]=STATE.OPEN_SETTINGS_WINDOW_KEY_STRING;
        configRaw[38]=String.valueOf(STATE.REFRESH_FRAME_KEY_CODE);
        configRaw[39]=STATE.REFRESH_FRAME_KEY_STRING;
        configRaw[44]=String.valueOf(STATE.SAVE_GRAPH_IMAGE_KEY_CODE);
        configRaw[45]=STATE.SAVE_GRAPH_IMAGE_KEY_STRING;
        configRaw[50]=String.valueOf(STATE.TOGGLE_BOTTOM_PANEL_VISIBILITY_KEY_CODE);
        configRaw[51]=STATE.TOGGLE_BOTTOM_PANEL_VISIBILITY_KEY_STRING;
        configRaw[56]=String.valueOf(STATE.TOGGLE_FULLSCREEN_MODE_KEY_CODE);
        configRaw[57]=STATE.TOGGLE_FULLSCREEN_MODE_KEY_STRING;

        configRaw[10]=getYesNoString(STATE.CLOSE_WINDOW_ALT_REQUIRED);
        configRaw[11]=getYesNoString(STATE.CLOSE_WINDOW_CTRL_REQUIRED);
        configRaw[12]=getYesNoString(STATE.CLOSE_WINDOW_SHIFT_REQUIRED);

        configRaw[16]=getYesNoString(STATE.OPEN_HELP_WINDOW_ALT_REQUIRED);
        configRaw[17]=getYesNoString(STATE.OPEN_HELP_WINDOW_CTRL_REQUIRED);
        configRaw[18]=getYesNoString(STATE.OPEN_HELP_WINDOW_SHIFT_REQUIRED);

        configRaw[22]=getYesNoString(STATE.OPEN_NEW_PLOT_ALT_REQUIRED);
        configRaw[23]=getYesNoString(STATE.OPEN_NEW_PLOT_CTRL_REQUIRED);
        configRaw[24]=getYesNoString(STATE.OPEN_NEW_PLOT_SHIFT_REQUIRED);

        configRaw[28]=getYesNoString(STATE.OPEN_NEW_WINDOW_ALT_REQUIRED);
        configRaw[29]=getYesNoString(STATE.OPEN_NEW_WINDOW_CTRL_REQUIRED);
        configRaw[30]=getYesNoString(STATE.OPEN_NEW_WINDOW_SHIFT_REQUIRED);

        configRaw[34]=getYesNoString(STATE.OPEN_SETTINGS_WINDOW_ALT_REQUIRED);
        configRaw[35]=getYesNoString(STATE.OPEN_SETTINGS_WINDOW_CTRL_REQUIRED);
        configRaw[36]=getYesNoString(STATE.OPEN_SETTINGS_WINDOW_SHIFT_REQUIRED);

        configRaw[40]=getYesNoString(STATE.REFRESH_FRAME_ALT_REQUIRED);
        configRaw[41]=getYesNoString(STATE.REFRESH_FRAME_CTRL_REQUIRED);
        configRaw[42]=getYesNoString(STATE.REFRESH_FRAME_SHIFT_REQUIRED);

        configRaw[46]=getYesNoString(STATE.SAVE_GRAPH_IMAGE_ALT_REQUIRED);
        configRaw[47]=getYesNoString(STATE.SAVE_GRAPH_IMAGE_CTRL_REQUIRED);
        configRaw[48]=getYesNoString(STATE.SAVE_GRAPH_IMAGE_SHIFT_REQUIRED);

        configRaw[52]=getYesNoString(STATE.TOGGLE_BOTTOM_PANEL_VISIBILITY_ALT_REQUIRED);
        configRaw[53]=getYesNoString(STATE.TOGGLE_BOTTOM_PANEL_VISIBILITY_CTRL_REQUIRED);
        configRaw[54]=getYesNoString(STATE.TOGGLE_BOTTOM_PANEL_VISIBILITY_SHIFT_REQUIRED);

        configRaw[58]=getYesNoString(STATE.TOGGLE_FULLSCREEN_MODE_ALT_REQUIRED);
        configRaw[59]=getYesNoString(STATE.TOGGLE_FULLSCREEN_MODE_CTRL_REQUIRED);
        configRaw[60]=getYesNoString(STATE.TOGGLE_FULLSCREEN_MODE_SHIFT_REQUIRED);

        configRaw[64]=getYesNoString(STATE.savePng);
        configRaw[66]=getYesNoString(STATE.saveJpeg);
        configRaw[68]=String.valueOf(STATE.imageWidth);
        configRaw[70]=String.valueOf(STATE.imageHeight);
        configRaw[72]=getYesNoString(STATE.getImageSizeAutomatically);
        configRaw[76]=getYesNoString(STATE.fullscreenOnStartup);
        configRaw[78]=getYesNoString(STATE.fullscreenOk);
        configRaw[80]=getYesNoString(STATE.bottomPanelExpandedOnStartup);
        configRaw[82]=getYesNoString(STATE.autoUpdate);
        configRaw[84]=String.valueOf(STATE.interpolationFactor);
        configRaw[86]=getYesNoString(STATE.isCustomInterpolated);
        configRaw[88]=String.valueOf(STATE.interpolationOffset);

        if(STATE.debug){
            System.out.println("writing Config");
        }
        try {
            configFile=new File("CSV_PLOTTERConfig.txt");
            configFile.delete();
            configFile.createNewFile();
            bw = new BufferedWriter(new FileWriter(configFile));
            for(int i=0;i<STATE.NUMBER_OF_CONFIG_ENTRIES;i++){
                bw.write(configRaw[i]);
                bw.newLine();
            }
            bw.flush();
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Checks whether an Update is available
     * @return true if an update is available, false if no update is available
     */
    public static boolean checkIfUpdateAvailable(){
        try{
            source = new URL(projectUri+branch+"/PublicVersion/VERSION");
            if(STATE.debug){
                System.out.println(projectUri+branch+"/PublicVersion/VERSION");
            }
            br=new  BufferedReader(new InputStreamReader(source.openStream()));
            String RemoteVersion=br.readLine().trim();
            //in String.split muss ein '.' escaped werden
            //http://www.java-examples.com/java-string-split-example
            //06.09.2017 3:46 Uhr
            //(codezeilen 31-41 im beispiel auf der website)
            String[] remote=RemoteVersion.split("\\.");
            String[] local=VERSION.split("\\.");
            for(int i=0;i<4;i++){
                if(STATE.debug){
                    System.out.println(local[i]+" | "+remote[i]);
                }
                if(Integer.parseInt(remote[i])>Integer.parseInt(local[i])){
                    return true;
                }
            }
            return false;
        }
        catch(Exception e){
            e.printStackTrace();
            return false;
        }
    }

    /**
     * After the Programm has checked whether an update from github is available it performs this update
     */
    public static void updateJar(){
        try{
            oldFile=new File("CSV_PLOTTER.jar");
            oldFile.delete();
            //fileUrl: "https://raw.githubusercontent.com/lukasaldersley/Raumklima/master/PublicVersion/VERSION"
            source = new URL(downloadTargetUri+branch+"/PublicVersion/CSV_PLOTTER.jar");
            readableByteChannelFromSource = Channels.newChannel(source.openStream());
            fileOutputStream = new FileOutputStream("CSV_PLOTTER.jar");
            fileOutputStream.getChannel().transferFrom(readableByteChannelFromSource, 0, Long.MAX_VALUE);
            fileOutputStream.close();
            Runtime.getRuntime().exec("java -jar CSV_PLOTTER.jar");
            System.exit(0);
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }

    private static String getYesNoString(boolean in){
        if(in){
            return "YES";
        }
        return "NO";
    }
}
